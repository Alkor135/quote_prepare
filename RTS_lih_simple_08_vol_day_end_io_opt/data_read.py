import pandas as pd
from sklearn.utils import resample
from pathlib import Path
import numpy as np
import sqlite3
import os


def code_int():
    """ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∫–æ–¥–æ–≤ —Å–≤–µ—á–µ–π """
    combination_dict = {}  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –æ—Ç 000 –¥–æ 222
    for i in range(3):  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
        for j in range(3):  # –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
            for k in range(3):  # –¢—Ä–µ—Ç—å–µ —á–∏—Å–ª–æ
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ 'ijk'
                key = f"{i}{j}{k}"
                # –ó–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                value = i * 9 + j * 3 + k  # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                combination_dict[key] = value
    return combination_dict


def encode_candle(row):
    """ –§–£–ù–ö–¶–ò–Ø –ö–û–î–ò–†–û–í–ê–ù–ò–Ø –°–í–ï–ß–ï–ô (–õ–ò–•–û–í–ò–î–û–í) """
    open_, low, high, close = row['OPEN'], row['LOW'], row['HIGH'], row['CLOSE']

    if close > open_:
        direction = 1  # –ë—ã—á—å—è —Å–≤–µ—á–∞
    elif close < open_:
        direction = 0  # –ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞
    else:
        direction = 2  # –î–æ–∂–∏

    upper_shadow = high - max(open_, close)
    lower_shadow = min(open_, close) - low
    body = abs(close - open_)

    def classify_shadow(shadow, body):
        if shadow < 0.1 * body:
            return 0  
        elif shadow < 0.5 * body:
            return 1  
        else:
            return 2  

    upper_code = classify_shadow(upper_shadow, body)
    lower_code = classify_shadow(lower_shadow, body)

    return f"{direction}{upper_code}{lower_code}"


def normalize(series):
    """ –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç 0 –¥–æ 1 """
    if len(series) == 0:  # –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º NaN
        return None
    return (series.iloc[-1] - series.min()) / (series.max() - series.min()) if series.max() != series.min() else 0


def data_load(db_path, start_date, end_date):
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º
    query = """
        SELECT TRADEDATE, OPEN, LOW, HIGH, CLOSE, VOLUME, LSTTRADE, OPENPOSITION 
        FROM Futures 
        WHERE TRADEDATE BETWEEN ? AND ? 
        ORDER BY TRADEDATE
    """
    with sqlite3.connect(db_path) as conn:
        df_fut = pd.read_sql_query(query, conn, params=(start_date, end_date))

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø—Ü–∏–æ–Ω–∞–º
    query = """
        SELECT TRADEDATE, OPENPOSITION, OPTIONTYPE, STRIKE
        FROM Options 
        WHERE TRADEDATE BETWEEN ? AND ? 
        ORDER BY TRADEDATE
    """
    with sqlite3.connect(db_path) as conn:
        df_opt = pd.read_sql_query(query, conn, params=(start_date, end_date))

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º TRADEDATE –≤ datetime
    df_fut['TRADEDATE'] = pd.to_datetime(df_fut['TRADEDATE'])
    df_opt['TRADEDATE'] = pd.to_datetime(df_opt['TRADEDATE'])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º df_opt —Å df_fut –ø–æ TRADEDATE, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É CLOSE –≤ df_opt
    df_opt = df_opt.merge(df_fut[['TRADEDATE', 'CLOSE']], on='TRADEDATE', how='left')

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Å–ª–æ–≤–∏—è–º
    df_calls_itm = df_opt[(df_opt['OPTIONTYPE'] == 'C') & (df_opt['STRIKE'] < 
        df_opt['CLOSE'])].groupby('TRADEDATE')['OPENPOSITION'].sum().rename('CALLS_ITM')

    df_calls_otm = df_opt[(df_opt['OPTIONTYPE'] == 'C') & (df_opt['STRIKE'] > 
        df_opt['CLOSE'])].groupby('TRADEDATE')['OPENPOSITION'].sum().rename('CALLS_OTM')

    df_puts_itm = df_opt[(df_opt['OPTIONTYPE'] == 'P') & (df_opt['STRIKE'] < 
        df_opt['CLOSE'])].groupby('TRADEDATE')['OPENPOSITION'].sum().rename('PUTS_ITM')

    df_puts_otm = df_opt[(df_opt['OPTIONTYPE'] == 'P') & (df_opt['STRIKE'] > 
        df_opt['CLOSE'])].groupby('TRADEDATE')['OPENPOSITION'].sum().rename('PUTS_OTM')

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å df_fut
    df = df_fut.merge(df_calls_itm, on='TRADEDATE', how='left')
    df = df.merge(df_calls_otm, on='TRADEDATE', how='left')
    df = df.merge(df_puts_itm, on='TRADEDATE', how='left')
    df = df.merge(df_puts_otm, on='TRADEDATE', how='left')

    # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –Ω—É–ª—è–º–∏ (–µ—Å–ª–∏ –Ω–∞ –¥–∞—Ç—É –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤)
    df.fillna(0, inplace=True)

    # –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
    def normalize_row(row):
        min_val = row.min()
        max_val = row.max()
        return (row - min_val) / (max_val - min_val) if max_val != min_val else row * 0
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
    columns_to_normalize = ['CALLS_ITM', 'CALLS_OTM', 'PUTS_ITM', 'PUTS_OTM']
    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
    normalized_data = df[columns_to_normalize].apply(normalize_row, axis=1)
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º DataFrame
    df[columns_to_normalize] = normalized_data
    df_fut = df.copy()

    # === üìå 1. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó CANDLE CODE ===
    df_fut['CANDLE_CODE'] = df_fut.apply(encode_candle, axis=1)  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–æ–≤ —Å–≤–µ—á–µ–π –ø–æ –õ–∏—Ö–æ–≤–∏–¥–æ–≤—É
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–≤–µ—á–Ω—ã–µ –∫–æ–¥—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç (—Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤)
    code_to_int_dic = code_int()
    df_fut['CANDLE_INT'] = df_fut['CANDLE_CODE'].map(code_to_int_dic)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ 'CANDLE_INT' –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df_fut[f'CI_{i}'] = df_fut['CANDLE_INT'].shift(i).astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ CANDLE_CODE –∏ CANDLE_INT
    df_fut = df_fut.drop(columns=['CANDLE_CODE', 'CANDLE_INT'])

    # === üìå 2. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó VOLUME ===
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É VOL-NORM
    df_fut['VOL-NORM'] = df_fut['VOLUME'].shift(1).rolling(window=20, min_periods=1).apply(normalize, raw=False)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å –æ–±—ä–µ–º–æ–º –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df_fut[f'VOL_{i}'] = df_fut['VOL-NORM'].shift(i)  # .astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ VOL-NORM –∏ VOLUME
    df_fut = df_fut.drop(columns=['VOL-NORM', 'VOLUME'])

    # === üìå 3. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó TRADEDATE –î–ù–ï–ô –ù–ï–î–ï–õ–ò ===
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ TRADEDATE –≤ —Ñ–æ—Ä–º–∞—Ç datetime
    df_fut['TRADEDATE'] = pd.to_datetime(df_fut['TRADEDATE'])
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ DAY_W —Å –Ω–æ–º–µ—Ä–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    df_fut['DAY-W'] = df_fut['TRADEDATE'].dt.weekday
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–Ω—è–º–∏ –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df_fut[f'DAY_W_{i}'] = df_fut['DAY-W'].shift(i).astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ DAY-W
    df_fut = df_fut.drop(columns=['DAY-W'])

    # === üìå 4. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó LSTTRADE –î–ù–ï–ô –î–û –≠–ö–°–ü–ò–†–ê–¶–ò–ò ===
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
    df_fut['TRADEDATE'] = pd.to_datetime(df_fut['TRADEDATE'])
    df_fut['LSTTRADE'] = pd.to_datetime(df_fut['LSTTRADE'])
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
    df_fut['DATE-DIFF'] = (df_fut['LSTTRADE'] - df_fut['TRADEDATE']).dt.days
    for i in range(1, 21):
        df_fut[f'DD_{i}'] = df_fut['DATE-DIFF'].shift(i).astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ DATE-DIFF –∏ LSTTRADE
    df_fut = df_fut.drop(columns=['DATE-DIFF', 'LSTTRADE'])

    # === üìå 5. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó OPENPOSITION ===
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É IO-NORM
    df_fut['IO-NORM'] = df_fut['OPENPOSITION'].shift(1).rolling(window=20, min_periods=1).apply(normalize, raw=False)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å –æ–±—ä–µ–º–æ–º –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df_fut[f'IO_{i}'] = df_fut['IO-NORM'].shift(i)  # .astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ IO-NORM –∏ OPENPOSITION
    df_fut = df_fut.drop(columns=['IO-NORM', 'OPENPOSITION'])

    # === üìå 6. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó CALLS_ITM ===
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å CALLS_ITM –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df_fut[f'C-ITM_{i}'] = df_fut['CALLS_ITM'].shift(i)  # .astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ CALLS_ITM
    df_fut = df_fut.drop(columns=['CALLS_ITM'])

    # === üìå 7. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó CALLS_OTM ===
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å CALLS_OTM –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df_fut[f'C-OTM_{i}'] = df_fut['CALLS_OTM'].shift(i)  # .astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ CALLS_OTM
    df_fut = df_fut.drop(columns=['CALLS_OTM'])

    # === üìå 8. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó PUTS_ITM ===
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å PUTS_ITM –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df_fut[f'P-ITM_{i}'] = df_fut['PUTS_ITM'].shift(i)  # .astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ PUTS_ITM
    df_fut = df_fut.drop(columns=['PUTS_ITM'])

    # === üìå 9. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó PUTS_OTM ===
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å PUTS_OTM –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df_fut[f'P-OTM_{i}'] = df_fut['PUTS_OTM'].shift(i)  # .astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ PUTS_OTM
    df_fut = df_fut.drop(columns=['PUTS_OTM'])

    # üìå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    df_fut['DIRECTION'] = (df_fut['CLOSE'] > df_fut['OPEN']).astype(int)

    df_fut = df_fut.dropna().reset_index(drop=True).copy()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)
    for col in [f'CI_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.int64)

    for col in [f'VOL_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.float32)

    for col in [f'DAY_W_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.int64)

    for col in [f'DD_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.int64)

    for col in [f'IO_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.float32)

    for col in [f'C-ITM_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.float32)

    for col in [f'C-OTM_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.float32)

    for col in [f'P-ITM_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.float32)

    for col in [f'P-OTM_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.float32)

    df_fut['DIRECTION'] = pd.to_numeric(df_fut['DIRECTION'], errors='coerce').fillna(0).astype(np.int64)

    df_fut = df_fut.copy()

    return df_fut


if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent
    os.chdir(script_dir)

    db_path = Path(r'C:\Users\Alkor\gd\data_quote_db\RTS_futures_options_day_2014.db')

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –¥–∞—Ç–∞–º–∏
    start_date = '2014-01-01'
    end_date = '2024-01-01'

    df_fut = data_load(db_path, start_date, end_date)
    print(df_fut)
