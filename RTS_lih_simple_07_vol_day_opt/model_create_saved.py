import sqlite3
import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import pandas as pd
import random
from pathlib import Path
from torch.utils.data import Dataset, DataLoader
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É —Å–≤–µ—á–µ–π
from data_processing import balance_classes, data_prepare, calculate_pnl

# === 1. –°–û–ó–î–ê–ù–ò–ï –ù–ï–ô–†–û–°–ï–¢–ò (LSTM) ===
class CandleLSTM(nn.Module):
    def __init__(self, vocab_size, embedding_dim, day_vocab_size, day_embedding_dim, hidden_dim, output_dim):
        super(CandleLSTM, self).__init__()

        # Embedding —Å–ª–æ–π –¥–ª—è –∫–æ–¥–æ–≤ —Å–≤–µ—á–µ–π
        self.embedding_candle = nn.Embedding(vocab_size, embedding_dim)
        
        # Embedding —Å–ª–æ–π –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        self.embedding_day = nn.Embedding(day_vocab_size, day_embedding_dim)

        # LSTM –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ñ–∏—á–∏ (embedding —Å–≤–µ—á–µ–π + –æ–±—ä–µ–º + embedding –¥–Ω—è –Ω–µ–¥–µ–ª–∏)
        self.lstm = nn.LSTM(embedding_dim + 1 + day_embedding_dim, hidden_dim, batch_first=True)

        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ª–æ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self.fc = nn.Linear(hidden_dim, output_dim)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x_candle, x_volume, x_day):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥—ã —Å–≤–µ—á–µ–π –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ embeddings
        x_candle = self.embedding_candle(x_candle)
        x_day = self.embedding_day(x_day)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–≤–µ—á–∏, –æ–±—ä–µ–º –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        x = torch.cat((x_candle, x_volume.unsqueeze(-1), x_day), dim=-1)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ LSTM
        x, _ = self.lstm(x)

        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ª–æ–π –∏ —Å–∏–≥–º–æ–∏–¥–∞
        x = self.fc(x[:, -1, :])
        return self.sigmoid(x)

# === 2. –°–û–ó–î–ê–ù–ò–ï DATASET ===
class CandlestickDataset(Dataset):
    def __init__(self, X_candle, X_volume, X_day, y):
        self.X_candle = torch.tensor(X_candle, dtype=torch.long)
        self.X_volume = torch.tensor(X_volume, dtype=torch.float32)
        self.X_day = torch.tensor(X_day, dtype=torch.long)  # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∫–∞–∫ long (–∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ)
        self.y = torch.tensor(y, dtype=torch.float32)

    def __len__(self):
        return len(self.X_candle)

    def __getitem__(self, idx):
        return self.X_candle[idx], self.X_volume[idx], self.X_day[idx], self.y[idx]

# === 3. –§–ò–ö–°–ê–¶–ò–Ø –°–õ–£–ß–ê–ô–ù–´–• –ß–ò–°–ï–õ –î–õ–Ø –î–ï–¢–ï–†–ú–ò–ù–ò–†–û–í–ê–ù–ù–û–°–¢–ò ===
def set_seed(seed=42):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False

# === 4. –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
db_path = Path(r'C:\Users\Alkor\gd\data_quote_db\RTS_futures_day_full.db')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞
script_dir = Path(__file__).parent
os.chdir(script_dir)

for counter in range(1, 101):
    set_seed(counter)

    with sqlite3.connect(db_path) as conn:
        df_fut = pd.read_sql_query(
            """
            SELECT TRADEDATE, OPEN, LOW, HIGH, CLOSE, VOLUME 
            FROM Day 
            WHERE TRADEDATE BETWEEN '2014-01-01' AND '2024-01-01' 
            ORDER BY TRADEDATE
            """,
            conn
        )

    df_fut = data_prepare(df_fut)

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞ —Å–µ—Ç–æ–≤
    X_candle = df_fut[[f'CI_{i}' for i in range(1, 21)]].values
    X_volume = df_fut[[f'VOL_{i}' for i in range(1, 21)]].values
    X_day = df_fut[[f'DAY_W_{i}' for i in range(1, 21)]].values
    y = df_fut['DIRECTION']
    
    X_candle, X_volume, X_day, y = map(np.array, [X_candle, X_volume, X_day, y])

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
    split = int(0.85 * len(y))
    X_train_candle, X_train_volume, X_train_day, y_train = X_candle[:split], X_volume[:split], X_day[:split], y[:split]
    # X_train_candle, X_train_volume, X_train_day, y_train = map(lambda x: x[:split], [X_candle, X_volume, X_day, y])
    X_test_candle, X_test_volume, X_test_day, y_test = X_candle[split:], X_volume[split:], X_day[split:], y[split:]

    # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤
    X_train_candle, X_train_volume, X_train_day, y_train = balance_classes(X_train_candle, X_train_volume, X_train_day, y_train)

    # –°–æ–∑–¥–∞–Ω–∏–µ dataset –∏ data loader
    train_dataset = CandlestickDataset(X_train_candle, X_train_volume, X_train_day, y_train)
    test_dataset = CandlestickDataset(X_test_candle, X_test_volume, X_test_day, y_test)

    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

    # === 5. –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò ===
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    model = CandleLSTM(vocab_size=27, embedding_dim=8, day_vocab_size=7, day_embedding_dim=4, hidden_dim=32, output_dim=1).to(device)
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    best_pnl = float('-inf')
    epoch_best_pnl = 0
    model_path = Path(fr"model\best_model_{counter}.pth")
    early_stop_epochs = 200
    epochs_no_improve = 0

    epochs = 100
    for epoch in range(epochs):
        model.train()
        total_loss = 0
        for X_candle_batch, X_volume_batch, X_day_batch, y_batch in train_loader:
            X_candle_batch, X_volume_batch, X_day_batch, y_batch = (
                X_candle_batch.to(device),
                X_volume_batch.to(device),
                X_day_batch.to(device),
                y_batch.to(device)
            )

            optimizer.zero_grad()
            y_pred = model(X_candle_batch, X_volume_batch, X_day_batch).squeeze()
            loss = criterion(y_pred, y_batch)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–µ ===
        model.eval()
        y_preds = []
        with torch.no_grad():
            for X_candle_batch, X_volume_batch, X_day_batch, _ in test_loader:
                X_candle_batch, X_volume_batch, X_day_batch = X_candle_batch.to(device), X_volume_batch.to(device), X_day_batch.to(device)
                y_pred = model(X_candle_batch, X_volume_batch, X_day_batch).squeeze().cpu().numpy()
                y_preds.extend(y_pred)

        # === –†–∞—Å—á–µ—Ç P/L ===
        test_open_prices = df_fut['OPEN'].iloc[split:].values
        test_close_prices = df_fut['CLOSE'].iloc[split:].values
        pnl = calculate_pnl(y_preds, test_open_prices, test_close_prices)

        print(
            f"Epoch {epoch + 1}/{epochs}, "
            f"Loss: {total_loss / len(train_loader):.5f}, "
            f"P/L: {pnl:.2f}, "
            f"Best P/L: {best_pnl:.2f}, "
            f"Epoch best P/L: {epoch_best_pnl}, "
            f"seed: {counter}"
            )

        if pnl > best_pnl:
            best_pnl = pnl
            epochs_no_improve = 0
            epoch_best_pnl = epoch + 1
            torch.save(model.state_dict(), model_path)
            print(f"‚úÖ Model saved with P/L: {best_pnl:.2f}")
        else:
            epochs_no_improve += 1
            if epochs_no_improve >= early_stop_epochs:
                print(f"üõë Early stopping at epoch {epoch + 1}")
                break

    # === 7. –ó–ê–ì–†–£–ó–ö–ê –õ–£–ß–®–ï–ô –ú–û–î–ï–õ–ò –ò –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ ===
    print("\nüîπ Loading best model for final evaluation...")
    model.load_state_dict(torch.load(model_path))
    model.eval()

    y_preds_final = []
    with torch.no_grad():
        for X_candle_batch, X_volume_batch, X_day_batch, _ in test_loader:
            X_candle_batch, X_volume_batch, X_day_batch = X_candle_batch.to(device), X_volume_batch.to(device), X_day_batch.to(device)
            y_pred = model(X_candle_batch, X_volume_batch, X_day_batch).squeeze().cpu().numpy()
            y_preds_final.extend(y_pred)

    final_pnl = calculate_pnl(y_preds_final, test_open_prices, test_close_prices)
    print(f"üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç P/L: {final_pnl:.2f}\n")
