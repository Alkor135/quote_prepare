import pandas as pd
from sklearn.utils import resample
from pathlib import Path
import numpy as np
import sqlite3
import os
import sys
sys.dont_write_bytecode = True


def balance_classes(X, y):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤ –º–µ—Ç–æ–¥–æ–º Oversampling.
    """
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df_train = pd.DataFrame(X, columns=[f'ed_{i}' for i in range(1, 21)])

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    df_train['TARGET'] = y

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–º –∫–ª–∞—Å—Å–µ
    class_counts = df_train['TARGET'].value_counts()
    print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π:\n", class_counts)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
    class_counts = df_train['TARGET'].value_counts()
    min_class = class_counts.idxmin()
    max_class = class_counts.idxmax()

    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
    df_minority = df_train[df_train['TARGET'] == min_class]
    df_majority = df_train[df_train['TARGET'] == max_class]

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–µ–¥–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–æ–º
    df_minority_unique = df_minority.loc[
        ~df_minority.drop(columns=['TARGET']).apply(tuple, axis=1).isin(
            df_majority.drop(columns=['TARGET']).apply(tuple, axis=1)
        )
    ]

    # –î—É–±–ª–∏—Ä—É–µ–º —Ä–µ–¥–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    df_minority_upsampled = resample(
        df_minority_unique,
        replace=True,
        n_samples=len(df_majority),
        random_state=42
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    df_balanced = pd.concat([df_majority, df_minority_upsampled]).sample(frac=1, random_state=42)

    # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    X_bal = df_balanced[[f'ed_{i}' for i in range(1, 21)]].values
    y_bal = df_balanced['TARGET'].values

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
    print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:\n", pd.Series(y_bal).value_counts())

    return (
        np.array(X_bal, dtype=np.float32), 
        np.array(y_bal, dtype=np.int64)
        )


def normalize(series):
    """ –ú–∏–Ω-–º–∞–∫—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–Ω–∞–∫–∞ """
    series = np.array(series, dtype=np.float32)  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ float32
    if series.size == 0 or np.all(series == 0):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –≤—Å–µ-–Ω—É–ª–µ–≤—ã–µ —Ä—è–¥—ã
        return pd.Series(np.zeros_like(series, dtype=np.float32))
    
    min_val = np.min(np.abs(series))
    max_val = np.max(np.abs(series))
    
    if max_val == min_val:
        return pd.Series(np.zeros_like(series, dtype=np.float32))  # –ï—Å–ª–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    
    normalized = (np.abs(series) - min_val) / (max_val - min_val) * np.sign(series)
    
    return pd.Series(normalized.astype(np.float32))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Series —Ç–æ–π –∂–µ –¥–ª–∏–Ω—ã


def data_load(db_path, start_date, end_date):
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º
    query = """
        SELECT TRADEDATE, OPEN, LOW, HIGH, CLOSE 
        FROM Futures 
        WHERE TRADEDATE BETWEEN ? AND ? 
        ORDER BY TRADEDATE
    """
    with sqlite3.connect(db_path) as conn:
        df_fut = pd.read_sql_query(query, conn, params=(start_date, end_date))

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º TRADEDATE –≤ datetime
    df_fut['TRADEDATE'] = pd.to_datetime(df_fut['TRADEDATE'])

    # –†–∞—Å—á—ë—Ç EMA_10
    df_fut['EMA_10'] = df_fut['CLOSE'].ewm(span=10, adjust=False).mean()

    # –†–∞—Å—á—ë—Ç EMA_12
    df_fut['EMA_12'] = df_fut['CLOSE'].ewm(span=12, adjust=False).mean()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä–∞–∑–Ω–∏—Ü—ã
    df_fut['ema_diff'] = df_fut['EMA_10'] - df_fut['EMA_12']

    # === üìå 1. –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó ema_diff ===
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ 'ema_diff' –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df_fut[f'ed_{i}'] = df_fut['ema_diff'].shift(i).astype('Float32')
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç ed_1 –¥–æ ed_20
    columns_to_normalize = [f"ed_{i}" for i in range(1, 21)]
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    df_fut[columns_to_normalize] = df_fut[columns_to_normalize].apply(normalize, axis=1)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ 'EMA_10', 'EMA_12', 'ema_diff'
    df_fut = df_fut.drop(columns=['EMA_10', 'EMA_12', 'ema_diff'])

    # üìå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    df_fut['DIRECTION'] = (df_fut['CLOSE'] > df_fut['OPEN']).astype(int)

    df_fut = df_fut.dropna().reset_index(drop=True).copy()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)
    for col in [f'ed_{i}' for i in range(1, 21)]:
        df_fut[col] = pd.to_numeric(df_fut[col], errors='coerce').fillna(0).astype(np.float32)

    df_fut['DIRECTION'] = pd.to_numeric(df_fut['DIRECTION'], errors='coerce').fillna(0).astype(np.int64)

    df_fut = df_fut.copy()

    return df_fut


if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent
    os.chdir(script_dir)

    db_path = Path(r'C:\Users\Alkor\gd\data_quote_db\RTS_futures_options_day_2014.db')

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –¥–∞—Ç–∞–º–∏
    start_date = '2014-01-01'
    end_date = '2024-01-01'

    df_fut = data_load(db_path, start_date, end_date)
    print(df_fut)
