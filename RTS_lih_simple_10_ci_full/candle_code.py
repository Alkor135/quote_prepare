# –ò—Å–∫–ª—é—á–µ–Ω—ã –¥–æ–∂–∏. –°—á–∏–Ω–∞—é—Ç—Å—è –∫–∞–∫ –±–∞—Ä –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å –º–∞–ª–µ–Ω—å–∫–∏–º —Ç–µ–ª–æ–º

from pathlib import Path
import pandas as pd
import sqlite3
import numpy as np
import sys
import os

sys.dont_write_bytecode = True

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Ä–∞—Å—á–µ—Ç—ã –≤–µ–ª–∏—á–∏–Ω—ã —Ç–µ–Ω–µ–π –∏ —Ç–µ–ª–∞ —Å–≤–µ—á–∏
PERIOD = 20  # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∫–≤–∞–Ω—Ç–∏–ª–µ–π.
QUAN_MIN = 0.25  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–∞–ª–µ–Ω—å–∫–∏–º.
QUAN_MAX = 0.75  # –í–µ–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –±–æ–ª—å—à–∏–º.

def code_binary_to_int():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ 7 —Å–∏–º–≤–æ–ª–æ–≤ (0 –∏ 1)"""
    combination_dict = {}  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª–∏–Ω–æ–π 7 –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ '0' –∏ '1'
    for i in range(2):  # –ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
        for j in range(2):  # –í—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª
            for k in range(2):  # –¢—Ä–µ—Ç–∏–π —Å–∏–º–≤–æ–ª
                for l in range(2):  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Å–∏–º–≤–æ–ª
                    for m in range(2):  # –ü—è—Ç—ã–π —Å–∏–º–≤–æ–ª
                        for n in range(2):  # –®–µ—Å—Ç–æ–π —Å–∏–º–≤–æ–ª
                            for o in range(2):  # –°–µ–¥—å–º–æ–π —Å–∏–º–≤–æ–ª
                                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –∫–∞–∫ —Å—Ç—Ä–æ–∫—É 'ijklmno'
                                key = f"{i}{j}{k}{l}{m}{n}{o}"
                                # –ó–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                                value = int(key, 2)  # –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é
                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å
                                combination_dict[key] = value
    return combination_dict

def coding(
        OPEN, CLOSE, size_hi, size_body, size_lo, q_hi_min, q_hi_max, q_body_min, q_body_max, 
        q_lo_min, q_lo_max
        ) -> str:
    """
    –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –ø–æ –õ–∏—Ö–æ–≤–∏–¥–æ–≤—É
    """
    code_str: str = ''  # –°—Ç—Ä–æ–∫–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∫–æ–¥ —Å–≤–µ—á–∏
    # –°–≤–µ—á–∞ –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ (–º–µ–¥–≤–µ–∂—å—è)
    if OPEN > CLOSE:  # –°–≤–µ—á–∞ –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ (–º–µ–¥–≤–µ–∂—å—è)
        code_str += '0'
        # –î–ª—è —Ç–µ–ª–∞ –º–µ–¥–≤–µ–∂—å–µ–π —Å–≤–µ—á–∏
        if size_body > q_body_max:  # 00 - –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ —Å —Ç–µ–ª–æ–º –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '00'
        elif size_body >= q_body_min:  # 01 - –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ —Å —Ç–µ–ª–æ–º —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '01'
        elif size_body > 0.0:  # 10 - –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ —Å —Ç–µ–ª–æ–º –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '10'
        # –î–ª—è –≤–µ—Ä—Ö–Ω–µ–π —Ç–µ–Ω–∏ –º–µ–¥–≤–µ–∂—å–µ–π —Å–≤–µ—á–∏
        if size_hi > q_hi_max:  # 11 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '11'
        elif size_hi >= q_hi_min:  # 10 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '10'
        elif size_hi > 0.0:  # 01 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '01'
        else:  # 00 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            code_str += '00'
        # –î–ª—è –Ω–∏–∂–Ω–µ–π —Ç–µ–Ω–∏ –º–µ–¥–≤–µ–∂—å–µ–π —Å–≤–µ—á–∏
        if size_lo > q_lo_max:  # 00 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '00'
        elif size_lo >= q_lo_min:  # 01 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '01'
        elif size_lo > 0.0:  # 10 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '10'
        else:  # 11 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            code_str += '11'
    # –°–≤–µ—á–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ (–±—ã—á—å—è)
    elif OPEN < CLOSE:  # –°–≤–µ—á–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ (–±—ã—á—å—è)
        code_str += '1'
        # –î–ª—è —Ç–µ–ª–∞ –±—ã—á—å–µ–π —Å–≤–µ—á–∏
        if size_body > q_body_max:  # 11 - –±—ã—á—å—è —Å–≤–µ—á–∞ —Å —Ç–µ–ª–æ–º –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤.
            code_str += '11'
        elif size_body >= q_body_min:  # 10 - –±—ã—á—å—è —Å–≤–µ—á–∞ —Å —Ç–µ–ª–æ–º —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '10'
        elif size_body > 0.0:  # 01 - –±—ã—á—å—è —Å–≤–µ—á–∞ —Å —Ç–µ–ª–æ–º –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '01'
        # –î–ª—è –≤–µ—Ä—Ö–Ω–µ–π —Ç–µ–Ω–∏ –±—ã—á—å–µ–π —Å–≤–µ—á–∏
        if size_hi > q_hi_max:  # 11 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '11'
        elif size_hi >= q_body_min:  # 10 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '10'
        elif size_hi > 0.0:  # 01 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '01'
        else:  # 00 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            code_str += '00'
        # –î–ª—è –Ω–∏–∂–Ω–µ–π —Ç–µ–Ω–∏ –±—ã—á—å–µ–π —Å–≤–µ—á–∏
        if size_lo > q_lo_max:  # 00 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '00'
        elif size_lo >= q_lo_min:  # 01 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '01'
        elif size_lo > 0.0:  # 10 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '10'
        else:  # 11 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            code_str += '11'
    # –î–æ–∂–∏
    else:  # –î–æ–∂–∏
        if size_hi > size_lo:  # –í–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –±–æ–ª—å—à–µ, –º–µ–¥–≤–µ–∂–∏–π –¥–æ–∂–∏
            code_str += '011'
        else:  # –í–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –º–µ–Ω—å—à–µ, –±—ã—á–∏–π –¥–æ–∂–∏
            code_str += '100'
        # –î–ª—è –≤–µ—Ä—Ö–Ω–µ–π —Ç–µ–Ω–∏ –¥–æ–∂–∏
        if size_hi > q_hi_max:  # 11 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '11'
        elif size_hi >= q_hi_min:  # 10 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '10'
        elif size_hi > 0.0:  # 01 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '01'
        else:  # 00 - –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            code_str += '00'
        # –î–ª—è –Ω–∏–∂–Ω–µ–π —Ç–µ–Ω–∏ –¥–æ–∂–∏
        if size_lo > q_hi_max:  # 00 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '00'
        elif size_lo >= q_lo_min:  # 01 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '01'
        elif size_lo > 0.0:  # 10 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            code_str += '10'
        else:  # 11 - –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            code_str += '11'
    return code_str


def candle_code(db_path, start_date, end_date):
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ—å—é—á–µ—Ä—Å–∞–º
    query = """
        SELECT TRADEDATE, OPEN, LOW, HIGH, CLOSE 
        FROM Futures 
        WHERE TRADEDATE BETWEEN ? AND ? 
        ORDER BY TRADEDATE
    """
    with sqlite3.connect(db_path) as conn:
        df = pd.read_sql_query(query, conn, params=(start_date, end_date))

    df[['TRADEDATE']] = df[['TRADEDATE']].apply(pd.to_datetime)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–Ω–µ–π –∏ —Ç–µ–ª–∞ —Å–≤–µ—á–∏
    df['size_hi'] = df.apply(lambda x: abs(x.HIGH - x.OPEN), axis=1)
    df['size_body'] = df.apply(lambda x: abs(x.OPEN - x.CLOSE), axis=1)
    df['size_lo'] = df.apply(lambda x: abs(x.OPEN - x.LOW), axis=1)
    
    # –ü–æ–¥—Å—á–µ—Ç –∏ –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–æ–Ω–∫–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Å–ª–æ–≤–∏—é –∫–≤–∞–Ω—Ç–∏–ª–µ–π –¥–ª—è —Ç–µ–Ω–µ–π –∏ —Ç–µ–ª–∞ —Å–≤–µ—á–∏
    df['q_hi_min'] = df.size_hi.rolling(window=PERIOD).quantile(QUAN_MIN)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–¥–∞–Ω–Ω—ã–π –∫–≤–∞–Ω—Ç–∏–ª—å –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —Ç–µ–Ω–∏ —Å–≤–µ—á–∏
    df['q_hi_max'] = df.size_hi.rolling(window=PERIOD).quantile(QUAN_MAX)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞–¥–∞–Ω–Ω—ã–π –∫–≤–∞–Ω—Ç–∏–ª—å –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —Ç–µ–Ω–∏ —Å–≤–µ—á–∏
    df['q_body_min'] = df.size_body.rolling(window=PERIOD).quantile(QUAN_MIN)
    df['q_body_max'] = df.size_body.rolling(window=PERIOD).quantile(QUAN_MAX)
    df['q_lo_min'] = df.size_lo.rolling(window=PERIOD).quantile(QUAN_MIN)
    df['q_lo_max'] = df.size_lo.rolling(window=PERIOD).quantile(QUAN_MAX)
    
    df = df.dropna().reset_index(drop=True)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–æ–¥–∞ —Å–≤–µ—á–∏
    df['CANDLE_CODE'] = df.apply(lambda x: coding(
        x.OPEN,
        x.CLOSE,
        x.size_hi,
        x.size_body,
        x.size_lo,
        x.q_hi_min,
        x.q_hi_max,
        x.q_body_min,
        x.q_body_max,
        x.q_lo_min,
        x.q_lo_max
        ), axis=1)  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±–µ—Ü candle_code
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–≤–µ—á–Ω—ã–µ –∫–æ–¥—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç (—Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤)
    code_to_int_dic = code_binary_to_int()
    df['CANDLE_INT'] = df['CANDLE_CODE'].map(code_to_int_dic)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ 'CANDLE_INT' –∑–∞ 20 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
    for i in range(1, 21):
        df[f'CI_{i}'] = df['CANDLE_INT'].shift(i).astype('Int64')
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ CANDLE_CODE –∏ CANDLE_INT
    df = df.drop(columns=[
        'size_hi', 'size_body', 'size_lo', 'q_hi_min', 'CANDLE_CODE', 'CANDLE_INT', 
        'q_hi_max', 'q_body_min', 'q_body_max', 'q_lo_min', 'q_lo_max'
        ])

    # üìå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    df['DIRECTION'] = (df['CLOSE'] > df['OPEN']).astype(int)

    # df['DIRECTION'] = df[['OPEN', 'CLOSE']].apply(lambda x: 1 if (x.CLOSE > x.OPEN) else 0, axis=1)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–∏
    # df = df[['TRADEDATE', 'OPEN', 'LOW', 'HIGH', 'CLOSE', 'CANDLE_CODE', 'CANDLE_INT', 'DIRECTION']]
    df = df.dropna().reset_index(drop=True)
    
    return df

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent
    os.chdir(script_dir)

    db_path = Path(r'C:\Users\Alkor\gd\data_quote_db\RTS_futures_options_day_2014.db')

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –¥–∞—Ç–∞–º–∏
    start_date = '2014-01-01'
    end_date = '2025-03-11'

    df_fut = candle_code(db_path, start_date, end_date)
    print(df_fut)
   